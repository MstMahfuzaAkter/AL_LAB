1)#include<bits/stdc++.h>
using namespace std;
int  bubblesort(string a[],int n)
{
    int swapcount=0;
    for(int i=0;i<n-1;i++)
    {
        for(int j=0;j<n-i-1;j++)
        {
            if(a[j]>a[j+1])
            {
                swap(a[j],a[j+1]);
                swapcount++;
            }
        }
    }
    return swapcount;

}

int main()
{
    cout<<"Enter the number of element:";
    int n;
    cin>>n;
    string a[n];
    for(int i=0;i<n;i++)
    {
        cin>>a[i];
    }

    int s=bubblesort(a,n);
    cout<<"Sorted Array:";
    for(int i=0;i<n;i++)
    {
        cout<<a[i]<<" ";
    }

    cout<<"Total Swap:"<<s<<endl;
}

2)InsertionSort
#include<bits/stdc++.h>
using namespace std;
int  insertionsort(string a[],int n)
{
    int swapcount=0;
    for(int i=1;i<n;i++)
    {
        int/string key=a[i];
        int j=i-1;
        while(j>=0 && a[j]>key)
            {
                a[j+1]=a[j];
                j--;
                swapcount++;
            }
            a[j+1]=key;
    }
    return swapcount;

}

int main()
{
    cout<<"Enter the number of element:";
    int n;
    cin>>n;
    string a[n];
    for(int i=0;i<n;i++)
    {
        cin>>a[i];
    }

    int s=insertionsort(a,n);
    cout<<"Sorted Array:";
    for(int i=0;i<n;i++)
    {
        cout<<a[i]<<" ";
    }

    cout<<"Total Swap:"<<s<<endl;
}
 

3)SelectionSort
#include<bits/stdc++.h>
using namespace std;
int selectionsort(string a[],int n)
{
    int swapcount=0;
    for(int i=0;i<n-1;i++)
    {
        int minindex=i;
        for(int j=i+1;j<n;j++)
        {
            if(a[j]<a[minindex])
            {
                minindex=j;
            }
        }
        if(minindex!=i)
        {
            swap(a[i],a[minindex]);
            swapcount++;
        }
    }
}

int main()
{
    cout<<"Enter the number of element:";
    int n;
    cin>>n;
    string a[n];
    for(int i=0;i<n;i++)
    {
        cin>>a[i];
    }

    int s=selectionsort(a,n);
    cout<<"Sorted Array:";
    for(int i=0;i<n;i++)
    {
        cout<<a[i]<<" ";
    }

    cout<<"Total Swap:"<<s<<endl;
}

4)Merge_Sort
#include<iostream>
using namespace std;

int mergeCount = 0; // to count number of merges

void merge(string a[], int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    string L[n1], R[n2];

    for(int i = 0; i < n1; i++)
        L[i] = a[left + i];
    for(int j = 0; j < n2; j++)
        R[j] = a[mid + 1 + j];

    int i = 0, j = 0, k = left;

    while(i < n1 && j < n2) {
        if(L[i] <= R[j]) {
            a[k++] = L[i++];
        } else {
            a[k++] = R[j++];
        }
    }

    while(i < n1)
        a[k++] = L[i++];
    while(j < n2)
        a[k++] = R[j++];

    mergeCount++; // count each merge step
}

void mergeSort(string a[], int left, int right) {
    if(left < right) {
        int mid = (left + right) / 2;
        mergeSort(a, left, mid);
        mergeSort(a, mid + 1, right);
        merge(a, left, mid, right);
    }
}

void printArray(string a[], int n) {
    cout << "Sorted Strings: ";
    for(int i = 0; i < n; i++)
        cout << a[i] << " ";
    cout << endl;
}

int main() {
    int n;
    cout << "Enter number of strings: ";
    cin >> n;
    string a[n];
    cout << "Enter the strings: ";
    for(int i = 0; i < n; i++) {
        cin >> a[i];
    }

    mergeSort(a, 0, n - 1);
    printArray(a, n);
    cout << "Total merge operations: " << mergeCount << endl;

    return 0;
}


#####
include<iostream>
using namespace std;

int moveCount = 0; // Track number of element writes (like simulated swaps)

void merge(int a[], int p, int q, int r) {
    int n1 = q - p + 1;
    int n2 = r - q;
    int L[n1], R[n2];

    for(int i = 0; i < n1; i++)
        L[i] = a[p + i];
    for(int j = 0; j < n2; j++)
        R[j] = a[q + 1 + j];

    int i = 0, j = 0, k = p;

    while(i < n1 && j < n2) {
        if(L[i] <= R[j]) {
            a[k++] = L[i++];
        } else {
            a[k++] = R[j++];
        }
        moveCount++; // Each write to original array counts as a "move"
    }

    while(i < n1) {
        a[k++] = L[i++];
        moveCount++;
    }
    while(j < n2) {
        a[k++] = R[j++];
        moveCount++;
    }
}

void mergesort(int a[], int p, int r) {
    if(p < r) {
        int q = (p + r) / 2;
        mergesort(a, p, q);
        mergesort(a, q + 1, r);
        merge(a, p, q, r);
    }
}

void printArray(int a[], int n) {
    cout << "Sorted Array: ";
    for(int i = 0; i < n; i++)
        cout << a[i] << " ";
    cout << endl;
}

int main() {
    int n;
    cout << "Enter the number of elements: ";
    cin >> n;
    int a[n];
    cout << "Enter the array elements: ";
    for(int i = 0; i < n; i++) {
        cin >> a[i];
    }

    mergesort(a, 0, n - 1);
    printArray(a, n);
    cout << "Total simulated swap (write/move) operations: " << moveCount << endl;

    return 0;
}

5)Matrix_multiplication
#include <bits/stdc++.h>
using namespace std;

#define MAX 100

void printoptimal(int s[MAX][MAX], int i, int j, char &name) {
    if (i == j) { // ✅ Fixed condition
        cout << name++;
        return;
    }
    cout << "(";
    printoptimal(s, i, s[i][j], name);
    printoptimal(s, s[i][j] + 1, j, name);  // ✅ s[i][j] + 1, not just s[i][j]
    cout << ")";
}

void matrixChainOrder(int p[], int n) {
    int m[MAX][MAX];
    int s[MAX][MAX];

    for (int i = 1; i < n; i++) {
        m[i][i] = 0;
    }

    for (int l = 2; l <= n - 1; l++) { // ✅ Fixed loop bounds
        for (int i = 1; i <= n - l+1; i++) {
            int j = i + l - 1;
            m[i][j] = INT_MAX;
            for (int k = i; k < j; k++) {
                int cost = m[i][k] + m[k + 1][j] + p[i - 1] * p[k] * p[j];
                if (cost < m[i][j]) {
                    m[i][j] = cost;
                    s[i][j] = k;
                }
            }
        }
    }

    cout << "Minimum number of multiplication is: " << m[1][n - 1] << endl;
    char name = 'A';
    cout << "Optimal multiplication sequence: ";
    printoptimal(s, 1, n - 1, name);
    cout << endl;
}

int main() {
    int n;
    cout << "Enter number of matrices: ";
    cin >> n;
    int p[MAX];
    cout << "Enter matrix dimensions (p0 p1 p2 ... pn): ";
    for (int i = 0; i <=n; i++) {
        cin >> p[i];
    }

    matrixChainOrder(p, n + 1);  // dimension array size = n+1
    return 0;
}

6)LCS
#include<iostream>
using namespace std;

string LCS(string s1, string s2, int m, int n) {
    int dp[100][100];  // Assumes max length of strings is < 100
    // Fill the dp table
    for (int i = 0; i <= m; i++) {
        for (int j = 0; j <= n; j++) {
            if (i == 0 || j == 0)
                dp[i][j] = 0;
            else if (s1[i - 1] == s2[j - 1])
                dp[i][j] = dp[i - 1][j - 1] + 1;
            else
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
        }
    }

    // Reconstruct the LCS string
    int i = m, j = n;
    char lcs[100]; // to hold LCS characters
    int index = dp[m][n];
    lcs[index] = '\0'; // null-terminate the string

    while (i > 0 && j > 0) {
        if (s1[i - 1] == s2[j - 1]) {
            lcs[index - 1] = s1[i - 1];
            i--;
            j--;
            index--;
        }
        else if (dp[i - 1][j] > dp[i][j - 1])
            i--;
        else
            j--;
    }

    cout << "Length of LCS: " << dp[m][n] << endl;
    return string(lcs);  // Convert char array to C++ string
}

int main() {
    string s1, s2;
    cout << "Enter first string: ";
    cin >> s1;
    cout << "Enter second string: ";
    cin >> s2;

    int m = s1.length();
    int n = s2.length();

    string lcs = LCS(s1, s2, m, n);
    cout << "LCS string: " << lcs << endl;

    return 0;
}

7)Fractional knap
#include<bits/stdc++.h>
using namespace std;

int main(){
int n;
cout<<"Enter the item numbers: ";
cin>>n;
int weight[n],value[n];
cout<<"Enter Weight: \n";
for(int i=0;i<n;i++){
    cin>>weight[i];
}
cout<<"Enter Profit value: \n";
for(int i=0;i<n;i++){
    cin>>value[i];
}
double ratio[n];
for(int i=0;i<n;i++){
    ratio[i]=(double)value[i]/weight[i];
}
int W;
cout<<"Enter the capacity: ";
cin>>W;
for(int i=0;i<n-1;i++){
    for(int j=i+1;j<n;j++){
        if(ratio[j]>ratio[i]){
            swap(ratio[i],ratio[j]);
            swap(weight[i],weight[j]);
            swap(value[i],value[j]);
        }
    }
}
double total_value=0.0;
for(int i=0;i<n;i++){
    if(W>=weight[i]){
        total_value=total_value+value[i];
        W=W-weight[i];
    }
    else{
        total_value=total_value+ratio[i]*W;
        W=0;
        break;
    }
}
cout<<"Maximum Fractional value: "<<total_value<<endl;
return 0;
}

8)0/1 knap
#include <iostream>
using namespace std;

int knapsack(int W, int weight[], int value[], int n) {
    int dp[101][1001]; // assuming max n=100 and W=1000

    for (int i = 0; i <= n; i++) {
        for (int w = 0; w <= W; w++) {
            if (i == 0 || w == 0) {
                dp[i][w] = 0;
            } else if (weight[i - 1] <= w) {
                int op1 = value[i - 1] + dp[i - 1][w - weight[i - 1]];
                int op2 = dp[i - 1][w];
                dp[i][w] = (op1 > op2) ? op1 : op2;
            } else {
                dp[i][w] = dp[i - 1][w];
            }
        }
    }
    return dp[n][W];
}

int main() {
    int n;
    cout << "Enter the number of items: ";
    cin >> n;

    int weight[100], value[100]; // assuming n ≤ 100

    cout << "Enter weights:\n";
    for (int i = 0; i < n; i++) {
        cin >> weight[i];
    }

    cout << "Enter profit values:\n";
    for (int i = 0; i < n; i++) {
        cin >> value[i];
    }

    int W;
    cout << "Enter knapsack capacity: ";
    cin >> W;

    int maxProfit = knapsack(W, weight, value, n);
    cout << "Maximum value in knapsack: " << maxProfit << endl;

    return 0;
}

9)DFS
#include <iostream>
#include <vector>

using namespace std;

void DFS(int node, vector<vector<int>>& adj, vector<bool>& visited) {
    visited[node] = true;
    cout << node << " ";  // Print visited node

    for (int neighbor : adj[node]) {
        if (!visited[neighbor]) {
            DFS(neighbor, adj, visited);
        }
    }
}

int main() {
    int vertices, edges;
    cout << "Enter number of vertices and edges: ";
    cin >> vertices >> edges;

    vector<vector<int>> adj(vertices);
    vector<bool> visited(vertices, false);

    cout << "Enter edges (u v): \n";
    for (int i = 0; i < edges; ++i) {
        int u, v;
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);  // Uncomment for undirected graph
    }

    int start;
    cout << "Enter starting node: ";
    cin >> start;

    cout << "DFS traversal: ";
    DFS(start, adj, visited);

    return 0;
}

10)BFS
#include <iostream>
#include <vector>
#include <queue>

using namespace std;

void BFS(int start, vector<vector<int>>& adj, vector<bool>& visited) {
    queue<int> q;
    q.push(start);
    visited[start] = true;

    while (!q.empty()) {
        int node = q.front();
        q.pop();
        cout << node << " ";  // Print visited node

        for (int neighbor : adj[node]) {
            if (!visited[neighbor]) {
                q.push(neighbor);
                visited[neighbor] = true;
            }
        }
    }
}

int main() {
    int vertices, edges;
    cout << "Enter number of vertices and edges: ";
    cin >> vertices >> edges;

    vector<vector<int>> adj(vertices);
    vector<bool> visited(vertices, false);

    cout << "Enter edges (u v): \n";
    for (int i = 0; i < edges; ++i) {
        int u, v;
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);  // Uncomment for undirected graph
    }

    int start;
    cout << "Enter starting node: ";
    cin >> start;

    cout << "BFS traversal: ";
    BFS(start, adj, visited);

    return 0;
}

11) BST
#include <iostream>

using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;

    Node(int val) {
        data = val;
        left = right = nullptr;
    }
};

// Insert a node into BST
Node* insert(Node* root, int key) {
    if (!root) return new Node(key);

    if (key < root->data) {
        root->left = insert(root->left, key);
    } else if (key > root->data) {
        root->right = insert(root->right, key);
    }

    return root;
}

// Search for a node in BST
bool search(Node* root, int key) {
    if (!root) return false;
    if (root->data == key) return true;

    return key < root->data ? search(root->left, key) : search(root->right, key);
}

// Find minimum value node (used for deletion)
Node* findMin(Node* root) {
    while (root->left) root = root->left;
    return root;
}

// Delete a node from BST
Node* deleteNode(Node* root, int key) {
    if (!root) return nullptr;

    if (key < root->data) {
        root->left = deleteNode(root->left, key);
    } else if (key > root->data) {
        root->right = deleteNode(root->right, key);
    } else {
        // Node with only one child or no child
        if (!root->left) return root->right;
        else if (!root->right) return root->left;

        // Node with two children: Get the inorder successor (smallest in the right subtree)
        Node* temp = findMin(root->right);
        root->data = temp->data;
        root->right = deleteNode(root->right, temp->data);
    }
    return root;
}

// Preorder Traversal (Root → Left → Right)
void preorder(Node* root) {
    if (!root) return;
    cout << root->data << " ";
    preorder(root->left);
    preorder(root->right);
}

// Inorder Traversal (Left → Root → Right)
void inorder(Node* root) {
    if (!root) return;
    inorder(root->left);
    cout << root->data << " ";
    inorder(root->right);
}

// Postorder Traversal (Left → Right → Root)
void postorder(Node* root) {
    if (!root) return;
    postorder(root->left);
    postorder(root->right);
    cout << root->data << " ";
}

int main() {
    Node* root = nullptr;
    int choice, key;

    while (true) {
        cout << "\n1. Insert\n2. Search\n3. Delete\n4. Inorder Traversal\n5. Exit\nEnter choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter value to insert: ";
                cin >> key;
                root = insert(root, key);
                break;
            case 2:
                cout << "Enter value to search: ";
                cin >> key;
                cout << (search(root, key) ? "Found" : "Not Found") << endl;
                break;
            case 3:
                cout << "Enter value to delete: ";
                cin >> key;
                root = deleteNode(root, key);
                break;
            case 4:
                cout << "Inorder Traversal: ";
                inorder(root);
                cout << endl;
                break;
            case 5:
                return 0;
            default:
                cout << "Invalid choice, try again!\n";
        }
    }
}

